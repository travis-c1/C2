#!/usr/bin/env node

'use strict'

const program = require('commander')
const scan = require('../lib/scan')
const logger = require('../lib/logger')
const Rc = require('../lib/rc')

const rc = new Rc()

program
  .option('-a, --all',
    'Scan all files, regardless if a git repo is found. Defaults to tracked files in git repositories.', rc.withAll.bind(rc))
  .option('-t, --target [/path/to/project]',
    'The location to scan. Defaults to $PWD.', rc.withTarget.bind(rc))
  .option('-f, --fail-on [low|medium|high|critical]',
    'Set the level at which hawkeye returns non-zero status codes. Defaults to low.', rc.withFailOn.bind(rc))
  .option('-m, --module [module name]',
    'Run specific module. Defaults to all applicable modules.', rc.withModule.bind(rc))
  .option('-e, --exclude [pattern]',
    'Specify one or more exclusion patterns (eg. test/*). Can be specified multiple times.', rc.withExclude.bind(rc))
  .option('-j, --json [/path/to/file.json]',
    'Write findings to file.', rc.withJson.bind(rc))
  .option('-s, --sumo [https://sumologic-http-connector]',
    'Write findings to SumoLogic.', rc.withSumo.bind(rc))
  .option('-H, --http [https://your-site.com/api/results]',
    'Write findings to a given url.', rc.withHttp.bind(rc))
  .option('--show-code',
    'Shows the code the module uses for reporting, useful for ignoring certain false positives', rc.withShowCode.bind(rc))
  .option('-g, --staged',
    'Scan only git-staged files.', rc.withStaged.bind(rc))
  .parse(process.argv)

if (!rc.target) {
  rc.withTarget(process.env.PWD || '/target')
}

scan(rc)
  .then(code => { process.exit(code) })
  .catch(e => {
    logger.error('Unexpected error occurred!', e.message)
    process.exit(42)
  })
